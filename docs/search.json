[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Paityn Richardson",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "hahahahhahha im evil lollllllowoahfbu3iebfuwbeiw",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Rodentdata.html",
    "href": "Rodentdata.html",
    "title": "Rodent Species",
    "section": "",
    "text": "data &lt;- tidytuesdayR::tt_load('2023-05-02')\n\n---- Compiling #TidyTuesday Information for 2023-05-02 ----\n--- There are 3 files available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 3: \"plots.csv\"\n  2 of 3: \"species.csv\"\n  3 of 3: \"surveys.csv\"\n\nspecies &lt;- data$species\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nweight_data &lt;- species %&gt;%                \n  mutate(weight_difference = meanwgt - juvwgt, na.rm = FALSE)\n\n\nlibrary(ggplot2)\nggplot(weight_data, aes(x = reorder(commonname, weight_difference), y = weight_difference, fill = weight_difference)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  scale_fill_gradient(low = \"pink\", high = \"orange\") +\n  labs(title = \"Weight Difference Across Rodent Species\",\n       x = \"Species Name\",\n       y = \"Weight Difference (g)\") +\n  theme_minimal()\n\nWarning: Removed 3 rows containing missing values (`position_stack()`)."
  },
  {
    "objectID": "CoffeeRatings.html",
    "href": "CoffeeRatings.html",
    "title": "Coffee Ratings",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndata &lt;- tidytuesdayR::tt_load('2020-07-07')\n\n---- Compiling #TidyTuesday Information for 2020-07-07 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"coffee_ratings.csv\"\n\ncoffee_ratings &lt;- data$coffee_ratings\n\n\ncoffee_ratings |&gt;\n  select(total_cup_points, country_of_origin ) |&gt;\n  group_by(country_of_origin)\n\n# A tibble: 1,339 × 2\n# Groups:   country_of_origin [37]\n   total_cup_points country_of_origin\n              &lt;dbl&gt; &lt;chr&gt;            \n 1             90.6 Ethiopia         \n 2             89.9 Ethiopia         \n 3             89.8 Guatemala        \n 4             89   Ethiopia         \n 5             88.8 Ethiopia         \n 6             88.8 Brazil           \n 7             88.8 Peru             \n 8             88.7 Ethiopia         \n 9             88.4 Ethiopia         \n10             88.2 Ethiopia         \n# ℹ 1,329 more rows\n\n\n\nggplot(coffee_ratings, aes(x = reorder(country_of_origin, total_cup_points), y = total_cup_points, fill = country_of_origin)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +  \n  labs(title = \"Total Cup Points by Country of Origin\",\n       x = \"Country of Origin\",\n       y = \"Total Cup Points\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "Project3.html",
    "href": "Project3.html",
    "title": "Poker Hands Probability",
    "section": "",
    "text": "In this project I plan to simulate the probability of being dealt a specific hand while playing poker. First I will simulate a deck of cards and then simulate the drawing of a 5 card hand with a function. Then I will use another function to check if the hand drawn at random matches a specific, special hand such as a full house, royal flush, etc.\nFirst, lets simulate a deck of cards\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\n\nlibrary(purrr)\n\n#use crossing function to associate each of the values with one of each of the suits \n\n\ndeck &lt;- crossing(value = c(2:10, \"J\", \"Q\", \"K\", \"A\"),\n\n                 suit = c(\"Spades\", \"Diamonds\", \"Clubs\", \"Hearts\"))\n\nNow, lets create a function that will deal a random hand of 5 cards from the deck.\n\ndeal_hand &lt;- function(deck){\n\n#pick random row numbers then index through deck data set to pick those specific rows \n\n  hand &lt;- deck[sample(nrow(deck), 5, replace = FALSE), ]\n\n  return(hand)\n\n}\n\nNow, lets write a few functions that will check for special hands.\n\ncheck_straight &lt;- function(hand){\n\n  value_order &lt;- c(\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \n\n\"A\")\n\n  ordered_hand_values &lt;- match(hand$value, value_order)\n\n  is_straight &lt;- all(diff(sort(ordered_hand_values)) == 1)\n\n  return(is_straight)\n\n}\n\ncheck_royal_flush &lt;- function(hand){\n\n  royal_values &lt;- c(\"10\", \"J\", \"Q\", \"K\", \"A\")\n\n  \n\n  is_flush &lt;- if_else(length(unique(hand$suit)) == 1, TRUE, FALSE)\n\n  is_royal &lt;- if_else(all(royal_values %in% hand$value), TRUE, FALSE)\n\n  return(is_flush && is_royal)\n\n}\n\ncheck_full_house &lt;- function(hand){\n\n  value_frequency &lt;- table(hand$value)\n\n  \n\n  #Gives True if there exactly 2 unique values and there are 3 repeats of the first value and 2 repeats of the second\n\n  suppressWarnings(if_else(length(value_frequency) == 2 &\n\n            all(value_frequency == c(3,2)), TRUE, FALSE))\n\n}\n\nNow, say this is a specific night at a casino and we want to know the probability that someone will be dealt a full house or a royal flush. Lets map these functions over numerous iterations in order to model this.\n\nset.seed(738)\niterations &lt;- 100000\n\nresults &lt;- \n  tibble(full_house = mean(map_lgl(1:iterations, ~check_full_house(deal_hand(deck)))),\n        royal_flush = mean(map_lgl(1:iterations, ~check_royal_flush(deal_hand(deck)))),\n        straight = mean(map_lgl(1:iterations, ~check_straight(deal_hand(deck)))))\n\nresults &lt;- results|&gt;\n  pivot_longer(cols = everything(), names_to = \"hand\", values_to = \"probability\")\n\nNow lets plot these results using a bar plot.\n\nggplot(results, aes(x = hand, y = probability, fill = hand)) +\n\n  geom_bar(stat = \"identity\") +\n\n  labs(title = \"Probabilities of Different Poker Hands\",\n\n       x = \"Poker Hand\",\n\n       y = \"Probability\") +\n\n  theme_minimal()\n\n\n\n\nAs we can see on the bar plot, a straight is the most common out of all the hands followed a full house and then a royal flush. With this information we can start to understand how common it is to be dealt certain hands in poker. This can be useful when trying to curb cheating attempts and or trying to place bets. This could also be helpful when designing online poker games and attempting to accurately replicate a real life game."
  }
]